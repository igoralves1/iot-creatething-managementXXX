service: iot-creatething-management

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
# To install run npm install
- serverless-domain-manager
- serverless-add-api-key
- serverless-iam-roles-per-function
- serverless-plugin-log-retention

custom:
  logRetentionInDays: 60
  fnCreateThing: 'createThing'
  fnCertificateInfo: 'certificateInfo'
  fnToken: 'token'
  fnTokenInsert: 'tokenInsert'
  fnPublishMqtt: 'publishMqtt'
  fnTokenInsertMQTT: 'tokenInsertMQTT'
  fnCron: 'cron'
  fnRequestMachineInfo: 'requestMachineInfo'
  fnVpcTest: 'vpcTest'
  fnPublishMqttNginxLog: 'publishmqttnginxlog'
  fnPostgreTest: 'postgreTest'
  fnScicanRndCreatething: 'scicanRndCreatething'
  # --------------------
  fnTestZabbixMQTT: 'testZabbixMQTT'
  # --------------------
  fnBootFwStart: 'fnBootFwStart'
  fnBootFwWrite: 'fnBootFwWrite'
  fnBootFwStop: 'fnBootFwStop'
  fnBootFwUpdateDone: 'fnBootFwUpdateDone'
  fnBootFwUpdateRequestStartProcess: 'fnBootFwUpdateRequestStartProcess'
  # --------------------
  fnDevMachineControlRead: 'fnDevMachineControlRead'
  fnRecordsFlushEvent: 'fnRecordsFlushEvent'
  fnRecordsPrintoutEvent: 'fnRecordsPrintoutEvent'
  fnRecordsCreateEvent: 'fnRecordsCreateEvent'
  fnCyclesActionRequest: 'fnCyclesActionRequest'
  fnCyclesActionResponse: 'fnCyclesActionResponse'
  # --------------------
  fnRequestAccountPasswordResetEmail: 'fnRequestAccountPasswordResetEmail'
  fnRequestAccountAssocEmail: 'fnRequestAccountAssocEmail'
  fnAccountSignUpEmail: 'fnAccountSignUpEmail'
  fnAccountDisassociate: 'fnAccountDisassociate'
  fnAccountAssociateDirect: 'fnAccountAssociateDirect'
  fnSendEmail: 'fnSendEmail'
  fnAccountSignUpForm: 'fnAccountSignUpForm'
  fnScicanGetAccountInformation: 'fnScicanGetAccountInformation'
  fnAccountGet: 'fnAccountGet'

  # ------ TESTS ------
  fnAutomatedTests: 'fnAutomatedTests'
  fnFwUpdateFlow_test: 'fnFwUpdateFlow_test'
  fnWatchmanCron: 'fnWatchmanCron'
  fnWatchmanMqtt: 'fnWatchmanMqtt'



  BUCKET_NAME: 'iot-things-certificates'
  DYNAMO-ARN: 'arn:aws:dynamodb:${self:provider.region}:*:table'
  SCUUID_TABLE_NAME: '${self:custom.PREFIX.${self:provider.stage}, self:custom.PREFIX.other}${file(env.yml):scuuidTable}'


  PREFIX:
    prod: ''
    production: ''
    other: '${self:provider.stage}-'

  SUFFIX:
    prod: ''
    production: ''
    other: '-${self:provider.stage}'

  #! Append stage name to domainName e.g iot-dev. No suffix if stage is production/prod.
  #! To CREATE domain run: serverless create_domain --stage stageName.
  #! To DELETE domain run: serverless delete_domain --stage stageName
  customDomain:
    domainName: iot${self:custom.SUFFIX.${self:provider.stage}, self:custom.SUFFIX.other}.scicanapi.com
    basePath: 'thing'
    stage: ${self:provider.stage}
    createRoute53Record: true
  apiKeys:
  - name: ${file(env.yml):SCICAN_RND_KEY_NAME_${self:provider.stage}}
    value: ${file(env.yml):SCICAN_RND_KEY_VALUE_${self:provider.stage}}
    usagePlan:
      name: "usageplan-${file(env.yml):SCICAN_RND_KEY_NAME_${self:provider.stage}}"
      quota:
        limit: 100000
        period: DAY
      throttle:
        burstLimit: 100
        rateLimit: 20
  - name: ${file(env.yml):SCICAN_KEY_NAME_${self:provider.stage}}
    value: ${file(env.yml):SCICAN_KEY_VALUE_${self:provider.stage}}
    usagePlan:
      name: "usageplan-${file(env.yml):SCICAN_KEY_NAME_${self:provider.stage}}"
      quota:
        limit: 1000
        period: DAY
      throttle:
        burstLimit: 100
        rateLimit: 20
  - name: ${file(env.yml):CEFLA_KEY_NAME_${self:provider.stage}}
    value: ${file(env.yml):CEFLA_KEY_VALUE_${self:provider.stage}}
    usagePlan:
      name: "usageplan-${file(env.yml):CEFLA_KEY_NAME_${self:provider.stage}}"
      quota:
        limit: 1000
        period: DAY
      throttle:
        burstLimit: 100
        rateLimit: 20

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${file(env.yml):${self:provider.stage}.region}
  versionFunctions: false

  iamManagedPolicies:
  - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    # resourcePolicy:
    #   - Effect: Allow
    #     Principal: '*'
    #     Action: execute-api:Invoke
    #     Resource:
    #       - "arn:aws:execute-api:${file(env.yml):${self:provider.stage}.region}:${ssm:scican-id~true}:lm3pu9q1ag/${self:provider.stage}/POST/${file(env.yml):SCICAN_COMPANY_NAME}/things"
    #     Condition:
    #       IpAddress:
    #         aws:SourceIp:
    #           - '69.17.128.238'
    #           - '54.149.160.209'
    #           - '74.65.0.83'
    #           - '99.228.248.94'

    #apiKeys:
    #  - name: ${self:service}-${file(env.yml):SCICAN_KEY_NAME_${self:provider.stage}}
    #    value: ${self:service}-${file(env.yml):SCICAN_KEY_VALUE_${self:provider.stage}}
    #  - name: ${self:service}-${file(env.yml):CEFLA_KEY_NAME_${self:provider.stage}}
    #    value: ${self:service}-${file(env.yml):CEFLA_KEY_VALUE_${self:provider.stage}}

    # - free:
    #   - ${self:provider.stage}-clientOne
    #   - ${self:provider.stage}-clientTwo
    #   - ${self:provider.stage}-${file(env.yml):CEFLA_COMPANY_NAME}
    #   - ${self:provider.stage}-${file(env.yml):SCICAN_COMPANY_NAME}
    # - paid:
  #   - ${self:provider.stage}-clientFour

  # usagePlan:
  #   quota:
  #     limit: 10
  #     offset: 0
  #     period: DAY
  #   throttle:
  #     burstLimit: 1
  #     rateLimit: 1
  # - free:
  #   quota:
  #     limit: 10
  #     offset: 5
  #     period: DAY
  #   throttle:
  #     burstLimit: 1
  #     rateLimit: 1
  # - paid:
  #   quota:
  #     limit: 5000
  #     offset: 0
  #     period: MONTH
  #   throttle:
  #     burstLimit: 1
  #     rateLimit: 1

  iamRoleStatements:
  - Effect: "Allow"
    Action:
    - "iot:*"
    Resource: '*'
  - Effect: 'Allow'
    Action:
    - 's3:*'
    Resource: 'arn:aws:s3:::${self:custom.BUCKET_NAME}-${self:provider.stage}/*'

  - Effect: Allow
    Action:
    - dynamodb:DescribeTable
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    Resource: '${self:custom.DYNAMO-ARN}/*'

  environment:
    BUCKET_NAME: ${self:custom.BUCKET_NAME}-${self:provider.stage}

# ===========================================

functions:
  scicancreatething:
    #! If the policy is not manually created the lambda will run in a loop
    # TODO - How to create a POLICY automatically if it doesn't exist in serverless.yml ?
    name: ${self:provider.stage}-${file(env.yml):SCICAN_COMPANY_NAME}-${self:custom.fnCreateThing}
    handler: fnCreateThing.fnCreateThing
    events:
    - http:
        path: ${file(env.yml):SCICAN_COMPANY_NAME}
        method: post
        private: true
    environment:
      COMPANY_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}
      PRIVATE_KEY: ${file(env.yml):${self:provider.stage}.SCICAN_PRIVATE_KEY}
      LOG_PROCESS_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}-${self:provider.stage}-${self:custom.fnCreateThing}
      POLICY_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}-iot-policy-${self:provider.stage}
      SCUUID_TABLE_NAME: ${self:custom.SCUUID_TABLE_NAME}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
    memorySize: 256
    timeout: 600
    iamRoleStatementsName: ${self:provider.stage}-${file(env.yml):SCICAN_COMPANY_NAME}-${self:custom.fnCreateThing}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${self:custom.BUCKET_NAME}-${self:provider.stage}/*'
    - Effect: Allow
      Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      Resource: '${self:custom.DYNAMO-ARN}/*'

  ceflacreatething:
    #! If the policy is not manually created the lambda will run in a loop
    # TODO - How to create a POLICY automatically if it doesn't exist in serverless.yml ?
    name: ${self:provider.stage}-${file(env.yml):CEFLA_COMPANY_NAME}-${self:custom.fnCreateThing}
    handler: fnCreateThing.fnCreateThing
    events:
    - http:
        path: ${file(env.yml):CEFLA_COMPANY_NAME}
        method: post
        private: true
    environment:
      COMPANY_NAME: ${file(env.yml):CEFLA_COMPANY_NAME}
      PRIVATE_KEY: ${file(env.yml):${self:provider.stage}.CEFLA_PRIVATE_KEY}
      LOG_PROCESS_NAME: ${file(env.yml):CEFLA_COMPANY_NAME}-${self:provider.stage}-${self:custom.fnCreateThing}
      POLICY_NAME: ${file(env.yml):CEFLA_COMPANY_NAME}-iot-policy-${self:provider.stage}
      SCUUID_TABLE_NAME: ${self:custom.SCUUID_TABLE_NAME}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${file(env.yml):CEFLA_COMPANY_NAME}-${self:custom.fnCreateThing}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${self:custom.BUCKET_NAME}-${self:provider.stage}/*'
    - Effect: Allow
      Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      Resource: '${self:custom.DYNAMO-ARN}/*'

  certificateinfo:
    # TODO - handle scenarios where certificate doesn't exists. For now if a provided certificate number doesn't exists we will get an error 'Internal error' as a response. Must handle this scenario.
    name: ${self:provider.stage}-${self:custom.fnCertificateInfo}
    handler: fnCertificateInfo.fnCertificateInfo
    events:
    - http:
        path: certificateInfo
        method: get
        private: true
        request:
          parameters:
            querystrings:
              scuuid: true
    memorySize: 256

  token:
    name: ${self:provider.stage}-${self:custom.fnToken}
    handler: fnToken.fnToken
    events:
    - http:
        path: ${file(env.yml):CEFLA_COMPANY_NAME}/token
        method: GET
        private: true
    memorySize: 256
    request:
      parameters:
        querystrings:
          scuuid: true
          serial_number: true
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnToken}
    iamRoleStatements:
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  tokenInsert:
    name: ${self:provider.stage}-${self:custom.fnTokenInsert}
    handler: fnTokenInsert.fnTokenInsert
    events:
    - http:
        path: tokenInsert
        method: POST
    memorySize: 256
    private: true
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnTokenInsert}
    iamRoleStatements:
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  tokenInsertMQTT:
    name: ${self:provider.stage}-${self:custom.fnTokenInsertMQTT}
    handler: fnTokenInsertMQTT.fnTokenInsertMQTT
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnTokenInsertMQTT}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/sys/cmd/fnCreateThing/#' "
    memorySize: 256
    timeout: 600
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnTokenInsertMQTT}
    iamRoleStatements:
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'

  publishmqtt:
    name: ${self:provider.stage}-${self:custom.fnPublishMqtt}
    handler: fnPublishMqtt.fnPublishMqtt
    events:
    - http:
        path: publishmqtt
        method: post
        private: false
        cors: true
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnPublishMqtt}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'

  lambdaCron:
    name: ${self:provider.stage}-${self:custom.fnCron}
    handler: fnCron.fnCron
    events:
    # - iot:
    #     name: ${self:provider.stage}_${self:custom.fnCron}
    #     sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/testfnCron/#' "
    # - schedule: cron(0/1 * * * ? *)
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnCron}
    iamRoleStatements:
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
    memorySize: 256
    timeout: 600

  rdsTestToken:
    name: ${self:provider.stage}-rdsTestTokens
    handler: rdsTestTokens.rdsTestTokens
    events:
    # - iot:
    #     name: ${self:provider.stage}_rdsTestToken
    #     sql: "SELECT *, topic() AS topic FROM 'scican/sys/cmd/fnCreateThing/#' "
    - http:
        path: rdsTestTokens
        method: POST
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-rdsTestTokens
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}
      MQTT_ENDPOINT: 'a3oug6yeqsiol5-ats.iot.us-west-2.amazonaws.com'

  fnBootFwStart:
    name: ${self:provider.stage}-${self:custom.fnBootFwStart}
    handler: src/fw_update/fnBootFwStart.fnBootFwStart
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnBootFwStart}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/MSSTER/+/CAN/RSP/boot_fw_start/#' "
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwStart}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}/*'
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      BUCKET_FIRMWARE: '${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  fnBootFwWrite:
    name: ${self:provider.stage}-${self:custom.fnBootFwWrite}
    handler: src/fw_update/fnBootFwWrite.fnBootFwWrite
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnBootFwWrite}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/MSSTER/+/CAN/RSP/boot_fw_write/#' "
    memorySize: 256
    timeout: 3
    maximumEventAge: 10
    maximumRetryAttempts: 3
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwWrite}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}/*'
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      BUCKET_FIRMWARE: '${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  fnBootFwStop:
    name: ${self:provider.stage}-${self:custom.fnBootFwStop}
    handler: src/fw_update/fnBootFwStop.fnBootFwStop
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnBootFwStop}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/MSSTER/+/CAN/RSP/boot_fw_stop/#' "
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwStop}
    iamRoleStatements:
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  fnBootFwUpdateRequestStartProcess:
    name: ${self:provider.stage}-${self:custom.fnBootFwUpdateRequestStartProcess}
    handler: src/fw_update/fnBootFwUpdateRequestStartProcess.fnBootFwUpdateRequestStartProcess
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnBootFwUpdateRequestStartProcess}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/SCICAN/+/CAN/CMD/boot_fw_update_request_start_process/#' "
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwUpdateRequestStartProcess}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}/*'
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      BUCKET_FIRMWARE: '${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  fnBootFwUpdateDone:
    name: ${self:provider.stage}-${self:custom.fnBootFwUpdateDone}
    handler: src/fw_update/fnBootFwUpdateDone.fnBootFwUpdateDone
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnBootFwUpdateDone}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/MSSTER/+/CAN/EVN/FW_UPDATE_DONE/#' "
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwUpdateDone}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}/*'
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      BUCKET_FIRMWARE: '${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  requestMachineInfo:
    name: ${self:provider.stage}-${self:custom.fnRequestMachineInfo}
    handler: fnRequestMachineInfo.fnRequestMachineInfo
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnRequestMachineInfo}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/sys/cmd/fnCreateThing/#' "
    memorySize: 256
    timeout: 60
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnRequestMachineInfo}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'

  vpcTest:
    name: ${self:provider.stage}-${self:custom.fnVpcTest}
    handler: fnVpcTest.fnVpcTest
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnVpcTest}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/SCICANSYS/fnVpcTestTrigger' "
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnVpcTest}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  publishmqttnginxlog:
    name: ${self:provider.stage}-${self:custom.fnPublishMqttNginxLog}
    handler: fnPublishMqttNginxLog.fnPublishMqttNginxLog
    events:
    - http:
        path: fnPublishMqttNginxLog
        method: post
        private: false
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnPublishMqttNginxLog}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'

  postgreTest:
    name: ${self:provider.stage}-${self:custom.fnPostgreTest}
    handler: fnPostgreTest.fnPostgreTest
    events:
    - iot:
        name: ${self:provider.stage}_fnPostgreTest
        sql: "SELECT *, topic() AS topic FROM 'scican/sys/cmd/fnCreateThing/#' "
    - http:
        path: fnPostgreTest
        method: POST
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-fnPostgreTest
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}
      MQTT_ENDPOINT: 'a3oug6yeqsiol5-ats.iot.us-west-2.amazonaws.com'

  scicanrndcreatething:
    #! If the policy is not manually created the lambda will run in a loop
    # TODO - How to create a POLICY automatically if it doesn't exist in serverless.yml ?

    name: ${self:provider.stage}-${file(env.yml):SCICAN_COMPANY_NAME}-${self:custom.fnScicanRndCreatething}
    handler: fnScicanRndCreatething.fnScicanRndCreatething
    events:
    - http:
        path: ${file(env.yml):SCICAN_COMPANY_NAME}/rnd
        method: post
        private: false
    environment:
      COMPANY_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}
      PRIVATE_KEY: ${file(env.yml):${self:provider.stage}.SCICAN_RND_PRIVATE_KEY}
      LOG_PROCESS_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}-${self:provider.stage}-${self:custom.fnScicanRndCreatething}
      POLICY_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}-rnd-iot-policy-${self:provider.stage}
      SCUUID_TABLE_NAME: ${self:custom.SCUUID_TABLE_NAME}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${file(env.yml):SCICAN_COMPANY_NAME}-${self:custom.fnScicanRndCreatething}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${self:custom.BUCKET_NAME}-${self:provider.stage}/*'
    - Effect: Allow
      Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      Resource: '${self:custom.DYNAMO-ARN}/*'

  testZabbixMQTT:
    name: ${self:provider.stage}-${self:custom.fnTestZabbixMQTT}
    handler: fnTestZabbixMQTT.fnTestZabbixMQTT
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnTestZabbixMQTT}
        sql: "SELECT *, topic() AS topic FROM 'fnTestZabbixMQTT/#'"
    memorySize: 256
    timeout: 60
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnTestZabbixMQTT}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  fnDevMachineControlRead:
    name: ${self:provider.stage}-${self:custom.fnDevMachineControlRead}
    handler: fnSciCanRnDlogs.fnSciCanRnDlogs
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnDevMachineControlRead}
        sql: "SELECT * AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/event/dev-machine_control-read' "
    memorySize: 512
    timeout: 60
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnDevMachineControlRead}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}/*'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'

  fnRecordsFlushEvent:
    name: ${self:provider.stage}-${self:custom.fnRecordsFlushEvent}
    handler: fnSciCanRnDlogs.fnSciCanRnDlogs
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnRecordsFlushEvent}
        sql: "SELECT * AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/event/records-flush' "
    memorySize: 512
    timeout: 60
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnRecordsFlushEvent}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}/*'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'

  fnRecordsPrintoutEvent:
    name: ${self:provider.stage}-${self:custom.fnRecordsPrintoutEvent}
    handler: fnSciCanRnDlogs.fnSciCanRnDlogs
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnRecordsPrintoutEvent}
        sql: "SELECT * AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/event/records-printout' "
    memorySize: 512
    timeout: 60
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnRecordsPrintoutEvent}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}/*'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'

  fnRecordsCreateEvent:
    name: ${self:provider.stage}-${self:custom.fnRecordsCreateEvent}
    handler: fnSciCanRnDlogs.fnSciCanRnDlogs
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnRecordsCreateEvent}
        sql: "SELECT * AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/event/records-create' "
    memorySize: 512
    timeout: 60
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnRecordsCreateEvent}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}/*'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'

  fnCyclesActionRequest:
    name: ${self:provider.stage}-${self:custom.fnCyclesActionRequest}
    handler: fnSciCanRnDlogs.fnSciCanRnDlogs
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnCyclesActionRequest}
        sql: "SELECT * AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/event/cycles-action-request' "
    memorySize: 512
    timeout: 60
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnCyclesActionRequest}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}/*'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'

  fnCyclesActionResponse:
    name: ${self:provider.stage}-${self:custom.fnCyclesActionResponse}
    handler: fnSciCanRnDlogs.fnSciCanRnDlogs
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnCyclesActionResponse}
        sql: "SELECT * AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/event/cycles-action-response' "
    memorySize: 512
    timeout: 60
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnCyclesActionResponse}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 's3:*'
      Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}/*'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'

  fnRequestAccountPasswordResetEmail:
    name: ${self:provider.stage}-${self:custom.fnRequestAccountPasswordResetEmail}
    handler: fnRequestAccountPasswordResetEmail.fnRequestAccountPasswordResetEmail
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnRequestAccountPasswordResetEmail}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/request/account-password_reset_email' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnRequestAccountPasswordResetEmail}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  fnRequestAccountAssocEmail:
    name: ${self:provider.stage}-${self:custom.fnRequestAccountAssocEmail}
    handler: fnRequestAccountAssocEmail.fnRequestAccountAssocEmail
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnRequestAccountAssocEmail}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/request/account-associate-email' "
        #sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/request/account-password_reset_email' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnRequestAccountAssocEmail}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  fnAccountSignUpEmail:
    name: ${self:provider.stage}-${self:custom.fnAccountSignUpEmail}
    handler: fnAccountSignUpEmail.fnAccountSignUpEmail
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnAccountSignUpEmail}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/request/account-signup-email' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnAccountSignUpEmail}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  fnAccountDisassociate:
    name: ${self:provider.stage}-${self:custom.fnAccountDisassociate}
    handler: fnAccountDisassociate.fnAccountDisassociate
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnAccountDisassociate}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/request/account-disassociate' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnAccountDisassociate}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  fnAccountAssociateDirect:
    name: ${self:provider.stage}-${self:custom.fnAccountAssociateDirect}
    handler: fnAccountAssociateDirect.fnAccountAssociateDirect
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnAccountAssociateDirect}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/request/account-associate-direct' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnAccountAssociateDirect}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  fnSendEmail:
    name: ${self:provider.stage}-${self:custom.fnSendEmail}
    handler: fnSendEmail.fnSendEmail
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnSendEmail}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/cmd/send_email' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnSendEmail}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: "Allow"
      Action:
      - "AWSLambdaVPCAccessExecutionRole"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    - Effect: 'Allow'
      Action:
      - 'ses:SendEmail'
      - 'ses:SendRawEmail'
      - 'ses:SendTemplatedEmail'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: ${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com
      MQTT_TOPIC_ENV: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      AWS_SES_REGION: ${file(env.yml):AWS_SES_REGION}
      AWS_SES_EMAIL_SENDER: ${file(env.yml):AWS_SES_EMAIL_SENDER}

  fnAutomatedTests:
    name: ${self:provider.stage}-${self:custom.fnAutomatedTests}
    handler: fnAutomatedTests.fnAutomatedTests
    events:
      - iot:
          name: ${self:provider.stage}_${self:custom.fnAutomatedTests}
          sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/evn/automated_tests' "
    memorySize: 2024
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnAutomatedTests}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "iot:*"
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'rds:*'
        Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
      - Effect: 'Allow'
        Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          - 'ec2:CreateNetworkInterface'
          - 'ec2:DescribeNetworkInterfaces'
          - 'ec2:DeleteNetworkInterfaces'
        Resource: "*"

  fnAccountSignUpForm:
    name: ${self:provider.stage}-${self:custom.fnAccountSignUpForm}
    handler: fnAccountSignUpForm.fnAccountSignUpForm
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnAccountSignUpForm}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/request/account-signup-form' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnAccountSignUpForm}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  fnScicanGetAccountInformation:
    name: ${self:provider.stage}-${self:custom.fnScicanGetAccountInformation}
    handler: fnScicanGetAccountInformation.fnScicanGetAccountInformation
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnScicanGetAccountInformation}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/evn/get-account-information' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnScicanGetAccountInformation}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  fnAccountGet:
    name: ${self:provider.stage}-${self:custom.fnAccountGet}
    handler: fnAccountGet.fnAccountGet
    events:
    - iot:
        name: ${self:provider.stage}_${self:custom.fnAccountGet}
        sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/+/srv/request/account-get' "
    memorySize: 512
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnAccountGet}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
      - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
      - 'rds:*'
      Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
    - Effect: 'Allow'
      Action:
      - 'logs:CreateLogGroup'
      - 'logs:CreateLogStream'
      - 'logs:PutLogEvents'
      - 'ec2:CreateNetworkInterface'
      - 'ec2:DescribeNetworkInterfaces'
      - 'ec2:DeleteNetworkInterfaces'
      Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}


  fnFwUpdateFlow_test:
    name: ${self:provider.stage}-${self:custom.fnFwUpdateFlow_test}
    handler: tests/fnFwUpdateFlow_test.fnFwUpdateFlow_test
    events:
      - iot:
          name: ${self:provider.stage}_${self:custom.fnFwUpdateFlow_test}
          sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/cmd/fnFwUpdateFlow_test' "
    memorySize: 2024
    timeout: 900
    maximumEventAge: 7200
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnFwUpdateFlow_test}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "iot:*"
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'rds:*'
        Resource: 'arn:aws:rds:${self:provider.region}:${ssm:scican-id~true}:db:${ssm:rdsMySqlCluster-${self:provider.stage}~true}'
      - Effect: 'Allow'
        Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          - 'ec2:CreateNetworkInterface'
          - 'ec2:DescribeNetworkInterfaces'
          - 'ec2:DeleteNetworkInterfaces'
        Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  fnWatchmanCron:
    name: ${self:provider.stage}-${self:custom.fnWatchmanCron}
    handler: fnWatchman.handlerCron
    events:
      - schedule: cron(0/5 * * * ? *)
    memorySize: 256
    timeout: 10
    maximumEventAge: 120
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnWatchmanCron}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "iot:*"
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 's3:*'
        Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}/*'
      - Effect: 'Allow'
        Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          - 'ec2:CreateNetworkInterface'
          - 'ec2:DescribeNetworkInterfaces'
          - 'ec2:DeleteNetworkInterfaces'
        Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      ZABBIX_SERVER: '172.31.87.224'
      # see: https://wsmonitoring.scicanapi.com/hosts.php?form=update&hostid=10380
      ZABBIX_HOSTNAME: 'HOST.${self:provider.stage}.Watchman'
      WATCHMAN_MQTT_RECEIVER_TOPIC: 'scican/watchman'
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      rdsMySqlDb: ${ssm:rdsMySqlDb-${self:provider.stage}~true}
      rdsMySqlHost: ${ssm:rdsMySqlHost-${self:provider.stage}~true}
      rdsMySqlUsername: ${ssm:rdsMySqlUsername-${self:provider.stage}~true}
      rdsMySqlPassword: ${ssm:rdsMySqlPassword-${self:provider.stage}~true}

  fnWatchmanMqtt:
    name: ${self:provider.stage}-${self:custom.fnWatchmanMqtt}
    handler: fnWatchman.handlerMqtt
    events:
      - iot:
          name: ${self:provider.stage}_${self:custom.fnWatchmanMqtt}
          sql: "SELECT * AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/watchman' "
    memorySize: 128
    timeout: 5
    maximumEventAge: 120
    maximumRetryAttempts: 1
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnWatchmanMqtt}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "iot:*"
        Resource: '*'
      - Effect: 'Allow'
        Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
        Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      BUCKET_SCICAN_RND_LOGS: '${file(env.yml):BUCKET_SCICAN_RND_LOGS}${self:provider.stage}'
      ZABBIX_SERVER: '172.31.87.224'
      # see: https://wsmonitoring.scicanapi.com/hosts.php?form=update&hostid=10380
      ZABBIX_HOSTNAME: 'HOST.${self:provider.stage}.Watchman'

# ===========================================
resources:
- ${file(resources/scuuid-resources.yml)}
- Outputs:
    SCUUIDTableArn:
      Value:
        Fn::GetAtt:
        - SCUUIDTable
        - Arn
      Export:
        Name: ${self:provider.stage}-SCUUIDTableArn

