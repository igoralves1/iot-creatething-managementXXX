service: iot-creatething-management

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  # To install run npm install
  - serverless-domain-manager
  - serverless-add-api-key
  - serverless-iam-roles-per-function

custom:
  fnCreateThing: 'createThing'
  fnCertificateInfo: 'certificateInfo'
  fnToken: 'token'
  fnTokenInsert: 'tokenInsert'
  fnPublishMqtt: 'publishMqtt'
  fnTokenInsertMQTT: 'tokenInsertMQTT'
  fnCron: 'cron'
  fnBootFwStart: 'bootFwStart'
  fnBootFwWrite: 'bootFwWrite'
  fnBootFwStop: 'bootFwStop'
  fnBootFwStopPROCESS: 'bootFwStopPROCESS'

  BUCKET_NAME: 'iot-things-certificates'
  
    
  DYNAMO-ARN: 'arn:aws:dynamodb:${self:provider.region}:*:table'
  SCUUID_TABLE_NAME: '${self:custom.PREFIX.${self:provider.stage}, self:custom.PREFIX.other}${file(env.yml):scuuidTable}'
  

  PREFIX:
    prod: ''
    production: ''
    other: '${self:provider.stage}-'

  SUFFIX:
    prod: ''
    production: ''
    other: '-${self:provider.stage}'
  
  #! Append stage name to domainName e.g iot-dev. No suffix if stage is production/prod. 
  #! To CREATE domain run: serverless create_domain --stage stageName. 
  #! To DELETE domain run: serverless delete_domain --stage stageName
  customDomain:
    domainName: iot${self:custom.SUFFIX.${self:provider.stage}, self:custom.SUFFIX.other}.scicanapi.com
    basePath: 'thing' 
    stage: ${self:provider.stage}
    createRoute53Record: true
  apiKeys:    
    - name: ${file(env.yml):SCICAN_KEY_NAME_${self:provider.stage}} 
      value: ${file(env.yml):SCICAN_KEY_VALUE_${self:provider.stage}}
      usagePlan:
        name: "usageplan-${file(env.yml):SCICAN_KEY_NAME_${self:provider.stage}}"
        quota:
          limit: 1000
          period: DAY
        throttle:
          burstLimit: 100
          rateLimit: 20
    - name: ${file(env.yml):CEFLA_KEY_NAME_${self:provider.stage}} 
      value: ${file(env.yml):CEFLA_KEY_VALUE_${self:provider.stage}}
      usagePlan:
        name: "usageplan-${file(env.yml):CEFLA_KEY_NAME_${self:provider.stage}}"
        quota:
          limit: 1000
          period: DAY
        throttle:
          burstLimit: 100
          rateLimit: 20

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${file(env.yml):${self:provider.stage}.region}

  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  # resourcePolicy:
  #   - Effect: Allow
  #     Principal: '*'
  #     Action: execute-api:Invoke
  #     Resource:
  #       - "arn:aws:execute-api:${file(env.yml):${self:provider.stage}.region}:366229877060:lm3pu9q1ag/${self:provider.stage}/POST/${file(env.yml):SCICAN_COMPANY_NAME}/things"
  #     Condition:
  #       IpAddress:
  #         aws:SourceIp:
  #           - '69.17.128.238'
  #           - '54.149.160.209'
  #           - '74.65.0.83'
  #           - '99.228.248.94'

  #apiKeys:    
  #  - name: ${self:service}-${file(env.yml):SCICAN_KEY_NAME_${self:provider.stage}} 
  #    value: ${self:service}-${file(env.yml):SCICAN_KEY_VALUE_${self:provider.stage}}
  #  - name: ${self:service}-${file(env.yml):CEFLA_KEY_NAME_${self:provider.stage}} 
  #    value: ${self:service}-${file(env.yml):CEFLA_KEY_VALUE_${self:provider.stage}}

    # - free:
    #   - ${self:provider.stage}-clientOne
    #   - ${self:provider.stage}-clientTwo
    #   - ${self:provider.stage}-${file(env.yml):CEFLA_COMPANY_NAME}
    #   - ${self:provider.stage}-${file(env.yml):SCICAN_COMPANY_NAME}
    # - paid:
    #   - ${self:provider.stage}-clientFour
      
  # usagePlan:
  #   quota:
  #     limit: 10
  #     offset: 0
  #     period: DAY
  #   throttle:
  #     burstLimit: 1
  #     rateLimit: 1
    # - free:
    #   quota:
    #     limit: 10
    #     offset: 5
    #     period: DAY
    #   throttle:
    #     burstLimit: 1
    #     rateLimit: 1
    # - paid:
    #   quota:
    #     limit: 5000
    #     offset: 0
    #     period: MONTH
    #   throttle:
    #     burstLimit: 1
    #     rateLimit: 1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "iot:*"
      Resource: '*'

    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: 'arn:aws:s3:::${self:custom.BUCKET_NAME}-${self:provider.stage}/*'

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: '${self:custom.DYNAMO-ARN}/*'

  environment:
    BUCKET_NAME: ${self:custom.BUCKET_NAME}-${self:provider.stage}

functions:
  scicancreatething:
  #! If the policy is not manually created the lambda will run in a loop
  # TODO - How to create a POLICY automatically if it doesn't exist in serverless.yml ?

    name: ${self:provider.stage}-${file(env.yml):SCICAN_COMPANY_NAME}-${self:custom.fnCreateThing}
    handler: fnCreateThing.fnCreateThing
    events:
      - http:
          path: ${file(env.yml):SCICAN_COMPANY_NAME}
          method: post
          private: true
    environment:
      COMPANY_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}
      PRIVATE_KEY: ${file(env.yml):${self:provider.stage}.SCICAN_PRIVATE_KEY}
      LOG_PROCESS_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}-${self:provider.stage}-${self:custom.fnCreateThing}
      POLICY_NAME: ${file(env.yml):SCICAN_COMPANY_NAME}-iot-policy-${self:provider.stage}
      SCUUID_TABLE_NAME: ${self:custom.SCUUID_TABLE_NAME}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${file(env.yml):SCICAN_COMPANY_NAME}-${self:custom.fnCreateThing}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: 'arn:aws:s3:::${self:custom.BUCKET_NAME}-${self:provider.stage}/*'
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: '${self:custom.DYNAMO-ARN}/*'  

  ceflacreatething:
  #! If the policy is not manually created the lambda will run in a loop
  # TODO - How to create a POLICY automatically if it doesn't exist in serverless.yml ?
  
    name: ${self:provider.stage}-${file(env.yml):CEFLA_COMPANY_NAME}-${self:custom.fnCreateThing}
    handler: fnCreateThing.fnCreateThing
    events:
      - http:
          path: ${file(env.yml):CEFLA_COMPANY_NAME}
          method: post
          private: true
    environment:
      COMPANY_NAME: ${file(env.yml):CEFLA_COMPANY_NAME}
      PRIVATE_KEY: ${file(env.yml):${self:provider.stage}.CEFLA_PRIVATE_KEY}
      LOG_PROCESS_NAME: ${file(env.yml):CEFLA_COMPANY_NAME}-${self:provider.stage}-${self:custom.fnCreateThing}
      POLICY_NAME: ${file(env.yml):CEFLA_COMPANY_NAME}-iot-policy-${self:provider.stage}
      SCUUID_TABLE_NAME: ${self:custom.SCUUID_TABLE_NAME}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
      
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${file(env.yml):CEFLA_COMPANY_NAME}-${self:custom.fnCreateThing}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "iot:*"
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: 'arn:aws:s3:::${self:custom.BUCKET_NAME}-${self:provider.stage}/*'
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: '${self:custom.DYNAMO-ARN}/*'

  certificateinfo:
    # TODO - handle scenarios where certificate doesn't exists. For now if a provided certificate number doesn't exists we will get an error 'Internal error' as a response. Must handle this scenario.
    name: ${self:provider.stage}-${self:custom.fnCertificateInfo}
    handler: fnCertificateInfo.fnCertificateInfo
    events:
      - http:
          path: certificateInfo
          method: get
          private: true
          request:
            parameters:
              querystrings:
                scuuid: true
    memorySize: 256

  token:
    name: ${self:provider.stage}-${self:custom.fnToken}
    handler: fnToken.fnToken
    events:
    - http:
        path: ${file(env.yml):CEFLA_COMPANY_NAME}/token
        method: GET  
        private: true
    memorySize: 256
    request:
      parameters:
        querystrings:
          scuuid: true
          serial_number: true
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnToken}
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
          - 'rds:*'
          Resource: 'arn:aws:rds:${self:provider.region}:366229877060:db:${file(env.yml):rdsMySqlCluster-${self:provider.stage}}'

        - Effect: 'Allow'
          Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          - 'ec2:CreateNetworkInterface'
          - 'ec2:DescribeNetworkInterfaces'
          - 'ec2:DeleteNetworkInterfaces'
          Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${file(env.yml):rdsMySqlDb-${self:provider.stage}}
      rdsMySqlHost: ${file(env.yml):rdsMySqlHost-${self:provider.stage}}
      rdsMySqlUsername: ${file(env.yml):rdsMySqlUsername-${self:provider.stage}}
      rdsMySqlPassword: ${file(env.yml):rdsMySqlPassword-${self:provider.stage}}

  tokenInsert:
    name: ${self:provider.stage}-${self:custom.fnTokenInsert}
    handler: fnTokenInsert.fnTokenInsert
    events:
    - http:
        path: tokenInsert
        method: POST  
    memorySize: 256
    private: true
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnTokenInsert}
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
          - 'rds:*'
          Resource: 'arn:aws:rds:${self:provider.region}:366229877060:db:${file(env.yml):rdsMySqlCluster-${self:provider.stage}}'

        - Effect: 'Allow'
          Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          - 'ec2:CreateNetworkInterface'
          - 'ec2:DescribeNetworkInterfaces'
          - 'ec2:DeleteNetworkInterfaces'
          Resource: "*"
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${file(env.yml):rdsMySqlDb-${self:provider.stage}}
      rdsMySqlHost: ${file(env.yml):rdsMySqlHost-${self:provider.stage}}
      rdsMySqlUsername: ${file(env.yml):rdsMySqlUsername-${self:provider.stage}}
      rdsMySqlPassword: ${file(env.yml):rdsMySqlPassword-${self:provider.stage}}

  tokenInsertMQTT:
    name: ${self:provider.stage}-${self:custom.fnTokenInsertMQTT}
    handler: fnTokenInsertMQTT.fnTokenInsertMQTT
    events:
      - iot:
          name: ${self:provider.stage}_${self:custom.fnTokenInsertMQTT}
          sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/scican/sys/cmd/fnCreateThing/#' "  
    memorySize: 256
    # timeout: 6
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnTokenInsertMQTT}
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
          - 'rds:*'
          Resource: 'arn:aws:rds:${self:provider.region}:366229877060:db:${file(env.yml):rdsMySqlCluster-${self:provider.stage}}'
        - Effect: 'Allow'
          Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          - 'ec2:CreateNetworkInterface'
          - 'ec2:DescribeNetworkInterfaces'
          - 'ec2:DeleteNetworkInterfaces'
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "iot:*"
          Resource: '*' 
    vpc: ${file(env.yml):vpc-${self:provider.stage}}
    environment:
      rdsMySqlDb: ${file(env.yml):rdsMySqlDb-${self:provider.stage}}
      rdsMySqlHost: ${file(env.yml):rdsMySqlHost-${self:provider.stage}}
      rdsMySqlUsername: ${file(env.yml):rdsMySqlUsername-${self:provider.stage}}
      rdsMySqlPassword: ${file(env.yml):rdsMySqlPassword-${self:provider.stage}}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'

  publishmqtt:
    name: ${self:provider.stage}-${self:custom.fnPublishMqtt}
    handler: fnPublishMqtt.fnPublishMqtt
    events:
      - http:
          path: publishmqtt
          method: post
          private: false
    environment:    
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'      
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnPublishMqtt}
    iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "iot:*"
      Resource: '*'

  lambdaCron:
    name: ${self:provider.stage}-${self:custom.fnCron}
    handler: fnCron.fnCron
    events:
      - iot:
          name: ${self:provider.stage}_${self:custom.fnCron}
          sql: "SELECT *, topic() AS topic FROM 'testfnCron/#' "
      # - schedule: cron(0/1 * * * ? *)
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnCron}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "iot:*"
        Resource: '*' 
    environment:    
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'   
    memorySize: 256
    timeout: 600

  rdsTestToken:
      name: ${self:provider.stage}-rdsTestTokens
      handler: rdsTestTokens.rdsTestTokens
      events:
        # - iot:
        #     name: ${self:provider.stage}_rdsTestToken
        #     sql: "SELECT *, topic() AS topic FROM 'scican/sys/cmd/fnCreateThing/#' "   
        - http:
            path: rdsTestTokens
            method: POST  
      memorySize: 256
      iamRoleStatementsName: ${self:provider.stage}-rdsTestTokens
      iamRoleStatements:
          - Effect: "Allow"
            Action:
              - "iot:*"
            Resource: '*'
          - Effect: 'Allow'
            Action:
            - 'rds:*'
            Resource: 'arn:aws:rds:${self:provider.region}:366229877060:db:${file(env.yml):rdsMySqlCluster-${self:provider.stage}}'

          - Effect: 'Allow'
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'ec2:CreateNetworkInterface'
            - 'ec2:DescribeNetworkInterfaces'
            - 'ec2:DeleteNetworkInterfaces'
            Resource: "*"
      vpc: ${file(env.yml):vpc-${self:provider.stage}}
      environment:
        rdsMySqlDb: ${file(env.yml):rdsMySqlDb-${self:provider.stage}}
        rdsMySqlHost: ${file(env.yml):rdsMySqlHost-${self:provider.stage}}
        rdsMySqlUsername: ${file(env.yml):rdsMySqlUsername-${self:provider.stage}}
        rdsMySqlPassword: ${file(env.yml):rdsMySqlPassword-${self:provider.stage}}
        MQTT_ENDPOINT: 'a3oug6yeqsiol5-ats.iot.us-west-2.amazonaws.com'

  bootFwStart:
      name: ${self:provider.stage}-${self:custom.fnBootFwStart}
      handler: fnBootFwStart.fnBootFwStart
      events:
        - iot:
            name: ${self:provider.stage}_${self:custom.fnBootFwStart}
            sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/MSSTER/+/CAN/RSP/boot_fw_start/#' "  
      memorySize: 256
      iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwStart}
      iamRoleStatements:
          - Effect: "Allow"
            Action:
              - "iot:*"
            Resource: '*' 
            
          - Effect: 'Allow'
            Action:
              - 's3:*'
            Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}/*'  
      environment:
        MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
        BUCKET_FIRMWARE: '${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}'
        mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}
  
  bootFwWrite:
      name: ${self:provider.stage}-${self:custom.fnBootFwWrite}
      handler: fnBootFwWrite.fnBootFwWrite
      events:
        - iot:
            name: ${self:provider.stage}_${self:custom.fnBootFwWrite}
            sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/MSSTER/+/CAN/RSP/boot_fw_write/#' "  
      memorySize: 256
      iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwWrite}
      iamRoleStatements:
          - Effect: "Allow"
            Action:
              - "iot:*"
            Resource: '*' 

          - Effect: 'Allow'
            Action:
              - 's3:*'
            Resource: 'arn:aws:s3:::${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}/*'  
      environment:
        MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
        BUCKET_FIRMWARE: '${file(env.yml):BUCKET_FIRMWARE}${self:provider.stage}'
        mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  bootFwStop:
    name: ${self:provider.stage}-${self:custom.fnBootFwStop}
    handler: fnBootFwStop.fnBootFwStop
    events:
      - iot:
          name: ${self:provider.stage}_${self:custom.fnBootFwStop}
          sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/MSSTER/+/CAN/RSP/boot_fw_stop/#' "  
    memorySize: 256
    iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwStop}
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
          - 'rds:*'
          Resource: 'arn:aws:rds:${self:provider.region}:366229877060:db:${file(env.yml):rdsMySqlCluster-${self:provider.stage}}'
        - Effect: 'Allow'
          Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          - 'ec2:CreateNetworkInterface'
          - 'ec2:DescribeNetworkInterfaces'
          - 'ec2:DeleteNetworkInterfaces'
          Resource: "*"
        - Effect: "Allow"
          Action:
          - "iot:*"
          Resource: '*' 
    vpc: ${file(env.yml):vpc-${self:provider.stage}}      
    environment:
      rdsMySqlDb: ${file(env.yml):rdsMySqlDb-${self:provider.stage}}
      rdsMySqlHost: ${file(env.yml):rdsMySqlHost-${self:provider.stage}}
      rdsMySqlUsername: ${file(env.yml):rdsMySqlUsername-${self:provider.stage}}
      rdsMySqlPassword: ${file(env.yml):rdsMySqlPassword-${self:provider.stage}}
      MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
      mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

  bootFwStopPROCESS:
      name: ${self:provider.stage}-${self:custom.fnBootFwStopPROCESS}
      handler: fnBootFwStopPROCESS.fnBootFwStopPROCESS
      events:
        - iot:
            name: ${self:provider.stage}_${self:custom.fnBootFwStopPROCESS}
            sql: "SELECT *, topic() AS topic FROM '${file(env.yml):mqttTopicEnv-${self:provider.stage}}/MSSTER/+/CAN/RSP/boot_fw_stop/PROCESS/#' "  
      memorySize: 256
      iamRoleStatementsName: ${self:provider.stage}-${self:custom.fnBootFwStopPROCESS}
      iamRoleStatements:
          - Effect: "Allow"
            Action:
              - "iot:*"
            Resource: '*'  
      environment:
        MQTT_ENDPOINT: '${file(env.yml):mqttEndPoint}${self:provider.region}.amazonaws.com'
        mqttTopicEnv: ${file(env.yml):mqttTopicEnv-${self:provider.stage}}

resources:
  - ${file(resources/scuuid-resources.yml)}
  - Outputs:
      SCUUIDTableArn:
        Value:
            Fn::GetAtt:
            - SCUUIDTable
            - Arn
        Export:
          Name: ${self:provider.stage}-SCUUIDTableArn